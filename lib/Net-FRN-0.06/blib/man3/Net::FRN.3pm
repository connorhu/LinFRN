.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::FRN 3"
.TH Net::FRN 3 "2013-12-08" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::FRN \- Perl interface to Free Radio Network protocol.
.SH "SYNOPSYS"
.IX Header "SYNOPSYS"
.Vb 1
\&    use Net::FRN;
\&
\&    my $client = Net::FRN\->client (
\&        Host     => \*(Aq01server.lpdnet.ru\*(Aq,
\&        Port     => 10026,
\&        Callsign => \*(AqSP513\*(Aq,
\&        Name     => \*(AqAlexander\*(Aq,
\&        Email    => \*(Aqsp513@example.org\*(Aq,
\&        Password => \*(AqMYPASSWD\*(Aq,
\&        Net      => \*(AqRussia\*(Aq,
\&        Type     => FRN_TYPE_CROSSLINK,
\&        Country  => \*(AqRussian Federation\*(Aq,
\&        City     => \*(AqSt\-Petersburg\*(Aq,
\&        Locator  => \*(AqKP50FA\*(Aq
\&    );
\&
\&    $client\->run;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Net::FRN is an implementation of Free Radio Network protocol.
.PP
Free Radio Network client/server is a program package which is widely used by
radio amateurs to link radio repeaters over Internet. For more information
on \s-1FRN\s0 see http://freeradionetwork.eu
.PP
There are 4 components implementing different parts of the \s-1FRN\s0 service:
.IP "\(bu" 4
Net::FRN
.Sp
Wrapper around everything else, containing methods to generate Client, Server
and AuthServer objects (see below).
.IP "\(bu" 4
Net::FRN::Client
.Sp
Component implementing fully functional \s-1FRN\s0 client.
.IP "\(bu" 4
Net::FRN::Server
.Sp
Not yet implemented.
.IP "\(bu" 4
Net::FRN::AuthServer
.Sp
Not yet implemented.
.SH "GETTING STARTED"
.IX Header "GETTING STARTED"
.SS "Initialization"
.IX Subsection "Initialization"
.Vb 1
\&    use Net::FRN;
\&
\&    my $client = Net::FRN\->client(
\&        Host     => \*(Aq01server.lpdnet.ru\*(Aq,
\&        Port     => 10026,
\&        Callsign => \*(AqSP513\*(Aq,
\&        Name     => \*(AqAlexander\*(Aq,
\&        Email    => \*(Aqsp513@example.org\*(Aq,
\&        Password => \*(AqMYPASSWD\*(Aq,
\&        Net      => \*(AqRussia\*(Aq,
\&        Type     => FRN_TYPE_CROSSLINK,
\&        Country  => \*(AqRussian Federation\*(Aq,
\&        City     => \*(AqSt\-Petersburg\*(Aq,
\&        Locator  => \*(AqKP50FA\*(Aq
\&    );
.Ve
.PP
Acceptable parameters for \fIclient()\fR are:
.IP "\(bu" 4
Host
.Sp
Host name or \s-1IP\s0 address of \s-1FRN\s0 server.
.IP "\(bu" 4
Port
.Sp
Port numer which \s-1FRN\s0 server listens on.
.IP "\(bu" 4
Name
.Sp
Operator's real name
.IP "\(bu" 4
Callsign
.Sp
Operator's callsign
.IP "\(bu" 4
Email
.Sp
Operator's E\-mail address.
.IP "\(bu" 4
Password
.Sp
The password.
.IP "\(bu" 4
Net
.Sp
Network (a.k.a. room) name to connect to. To change network even on the same
server you should disconnect and connect again to the new network.
.IP "\(bu" 4
Type
.Sp
Type of \s-1FRN\s0 client. Use FRN_TYPE_* constants or return value of \fImkLinkString()\fR.
.IP "\(bu" 4
Country
.Sp
Country name.
.IP "\(bu" 4
City
.Sp
City where operator is located
.IP "\(bu" 4
Locator
.Sp
Part of the city or QTH-locator
.SS "Handlers"
.IX Subsection "Handlers"
Use \fIhandler()\fR method to set handler.
.PP
.Vb 2
\&    $client\->handler(\*(AqonClinetList\*(Aq, &showClientList);
\&    $client\->handler(\*(AqonMessage\*(Aq,    &printMessage);
.Ve
.PP
Available handlers are:
.IP "\(bu" 4
\&\fIonPing()\fR
.Sp
\&\fIonPing()\fR is called every time client sends a ping packet right after buffering
ping sequence.
.IP "\(bu" 4
\&\fIonLogin()\fR
.Sp
\&\fIonLogin()\fR is called right after succeccful logging in.
.IP "\(bu" 4
\&\fIonIdle()\fR
.Sp
\&\fIonIdle()\fR calls when client is idle.
.IP "\(bu" 4
onClientList(\e@clientList)
.Sp
\&\fIonClientList()\fR is called every time the list of clients received from server.
.RS 4
.ie n .IP "$_[0]" 4
.el .IP "\f(CW$_\fR[0]" 4
.IX Item "$_[0]"
Reference to array of client description records.
.Sp
Client description structure:
.Sp
.Vb 10
\&    {
\&        S   => FRN_STATUS_ONLINE,
\&        M   => FRN_MUTE_OFF,
\&        NN  => \*(AqCountry\*(Aq,
\&        CT  => \*(AqCity \- QTH\*(Aq,
\&        BC  => FRN_TYPE_PC_ONLY,
\&        ON  => \*(AqCallsign, Name\*(Aq,
\&        ID  => 11,
\&        DS  => \*(Aq\*(Aq
\&    }
.Ve
.RE
.RS 4
.RE
.IP "\(bu" 4
onNetworkList(\e@networkList)
.Sp
\&\fIonNetworkList()\fR is called every time the list of networks recieved from the
server.
.RS 4
.ie n .IP "$_[0];" 4
.el .IP "\f(CW$_\fR[0];" 4
.IX Item "$_[0];"
Reference to array of network names.
.RE
.RS 4
.RE
.IP "\(bu" 4
onMessage(\e%message)
.Sp
\&\fIonMessage()\fR is called every time the message is received.
.RS 4
.ie n .IP "$_[0]" 4
.el .IP "\f(CW$_\fR[0]" 4
.IX Item "$_[0]"
Message structure
.Sp
.Vb 5
\&    {
\&        from => \e%client,
\&        type => FRN_MESSAGE_BROADCAST,
\&        text => \*(AqHello World!\*(Aq
\&    }
.Ve
.RS 4
.IP "from" 4
.IX Item "from"
Sender client description record.
.IP "type" 4
.IX Item "type"
Type of the message.
Use constants \s-1FRN_MESSAGE_PRIVATE\s0 and \s-1FRN_MESSAGE_BROADCAST\s0.
.IP "text" 4
.IX Item "text"
Message text.
.RE
.RS 4
.RE
.RE
.RS 4
.RE
.IP "\(bu" 4
onPrivateMessage
.IP "\(bu" 4
onBroadcastMessage
.IP "\(bu" 4
onRX
.IP "\(bu" 4
onGSM
.IP "\(bu" 4
onPCM
.IP "\(bu" 4
onBanList(\e@banList)
.Sp
\&\fIonBanList()\fR is called every time the list of banned clients received from server.
.RS 4
.ie n .IP "$_[0]" 4
.el .IP "\f(CW$_\fR[0]" 4
.IX Item "$_[0]"
Reference to array of banned client description records.
.Sp
Banned client description structure:
.Sp
.Vb 8
\&    {
\&        AI  => \*(AqADMIN, Administrator\*(Aq;
\&        NN  => \*(AqCountry\*(Aq,
\&        CT  => \*(AqCity \- QTH\*(Aq,
\&        BC  => FRN_TYPE_PC_ONLY,
\&        ON  => \*(AqCallsign, Name\*(Aq,
\&        ID  => \*(Aq192.168.0.1\*(Aq,
\&    }
.Ve
.RE
.RS 4
.RE
.IP "\(bu" 4
onMuteList(\e@muteList)
.Sp
\&\fIonMuteList()\fR is called every time the list of muted clients received from server.
.RS 4
.ie n .IP "$_[0]" 4
.el .IP "\f(CW$_\fR[0]" 4
.IX Item "$_[0]"
Reference to array of muted client description records.
.Sp
Muted client description structure:
.Sp
.Vb 8
\&    {
\&        AI  => \*(AqADMIN, Administrator\*(Aq;
\&        NN  => \*(AqCountry\*(Aq,
\&        CT  => \*(AqCity \- QTH\*(Aq,
\&        BC  => FRN_TYPE_PC_ONLY,
\&        ON  => \*(AqCallsign, Name\*(Aq,
\&        ID  => \*(Aq192.168.0.1\*(Aq,
\&    }
.Ve
.RE
.RS 4
.RE
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SS "Constants"
.IX Subsection "Constants"
\&\s-1FRN\s0 client types:
.IP "\(bu" 4
\&\s-1FRN_TYPE_PC_ONLY\s0
.IP "\(bu" 4
\&\s-1FRN_TYPE_CROSSLINK\s0
.IP "\(bu" 4
\&\s-1FRN_TYPE_PARROT\s0
.SH "AUTHOR"
.IX Header "AUTHOR"
Alexander Frolov <froller@cpan.org>
.SH "URL"
.IX Header "URL"
Up-to-date source and information about Net::FRN::Client can be found at
http://orn.froller.net
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
\&\fIperl\fR\|(1)
.IP "\(bu" 4
http://freeradionetwork.eu, Free Radio Network web site
.IP "\(bu" 4
http://lpdnet.ru, Russian \s-1LPD\s0 Network web site
.SH "TODO"
.IX Header "TODO"
.IP "\(bu" 4
Reorganize parameters of \fIclient()\fR.
.IP "\(bu" 4
Add reconnection to backup server.
